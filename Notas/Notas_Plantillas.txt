Las plantillas son cadenas de texto que pueden contener código HTML, aunque no
exclusivamente código HTML, estas pueden ser cualquier archivo de texto plano.

El uso de las plantillas en Django es para separar la parte lógica de la parte
visual del proyecto.

Escribir el código HTML directamente como cadena de texto en el módulo views
es considerado una mala practica de programación, lo ideal es separar esto con
el uso de las plantillas.

La forma mas habitual de usar las plantillas es guardar una cadena de texto con
digamos código HTML en un documento independiente y después se carga este
documento en el módulo de views.

Las plantillas permiten la diversificación del trabajo, separando este en
varias áreas en las cuales se puede trabajar de forma independiente (varios
programadores diseñadores / programadores).

Para crear una plantilla en Django primero se crea un objeto de tipo "Template"
luego se crea un objeto de tipo "Context" que hace alución al contexto o a los
datos adicionales que pueden utilizarse al interior del Template o plantilla
estos datos pueden ser por ejemplo contenido dinámico. Finalmente se debe
renderizar el objeto "Template" previamente creado.

Para hacer uso de las variables creadas dentro de la plantilla nos valemos del
objeto de tipo contexto creado anteriormente, dicho objeto al ser creado recibe
como argumento diccionarios que nos permiten hacer uso de variables u otros
objetos.

Para utilizar dentro del context las utilidades de la programación orientada a
objetos se utiliza la nomenclatura del punto, esto se puede hacer incluso
desde la plantilla HTML, utilizando el punto para acceder a las propiedades y
funciones del objeto específicado.

También podemos hacer uso de nuestras propias clases y objetos definiendolas
en otros módulos o directamente en el módulo más conveniente.

El diccionario del contexto también recibe listas.

Django tiene una "jerarquía" de llamadas al interior de las plantillas bajo
el siguiente orden:

1) Diccionario
2) Atributo
3) Método
4) Índice de lista

Desde las plantillas de Django podemos usar bucles y condicionales con la
siguiente sintaxis:

Sintaxis para bucles for:

{% for <variable> in <lista> %}
    {{<código>}}
{% endfor %}

Sintaxis para condicionales if:

{% if <condición> %}
    {{<código>}}
{% else %}
    {{<código>}}
{% endif %}

Estos condicionales if también soportan operadores de comparación, sin embargo
no es recomendable abusar de las estructuras de control de flujo dentro de las
plantillas debido a que la filosofía de Django es separar la parte lógica de la
parte del diseño, dejando la parte lógica en los módulos python y la parte
visual en las plantillas.

Dentro de las plantillas también se pueden añadir comentarios Django de una
única línea con esta sintaxis:

{# Esto es un comentario #}

y de varias lineas con la siguiente sintaxis:

{% comment %}
    Esto es un comentario
    de varias líneas
{% endcomment %}

Django además de facilitar el uso de llamadas a métodos dentro de las
plantillas también admite el uso de "filtros" con funcionalidades símilares
con el uso de la nomenclatura de "pipes" o "tuberías" (|) existen varios
filtros entre los que se encuentran:

"|upper" = Pone en mayúscula una cadena de texto
"|lower" = Pone en minúscula una cadena de texto
"|first" = Primera letra de una cadena de texto

los filtros funcionan de forma diferente dependiendo de en dónde se aplique,
es posible también encadenar estos filtros.

En la documentación de Django "https://docs.djangoproject.com/" las estructuras
de control de flujo y los filtros aparecen como "template filters" se 
recomienda consultar esta documentación si se quieren averiguar más operadores
estructuras y filters.

La forma correcta de cargar una plantilla no es la que se viene implementando
hasta ahora debido a que no es una solución con la que se puedan implementar
comodamente varias plantillas (no es escalable) como sería el caso de un 
proyecto real. Para cargar una plantilla adecuadamente a una vista la forma 
correcta es através de cargadores de plantillas (loaders).

Para que funcionen los "loaders" necesitamos especificar un directorio
específico donde se guardaran nuestra plantillas, normalmente a este directorio
se le llama "templates" sin embargo en nuestro proyecto de practica la carpeta
de las plantillas se llama "plantillas".

Luego al cargar una plantilla simplemente se utiliza el nombre de la plantilla,
podemos prescindir del método open y el hecho de leer los documentos que de
por sí ya son tareas que consumen recursos.

Para implementar un cargador de plantillas lo primero es importar el módulo
"loader" del paquete "django.template" con la siguiente línea 
"from django.template import loader". La clase loader contiene un método
llamado get_template que nos va a permitir cargar las plantillas que Django
ya sabe que se encuentran en el directorio especificado.

Para que el loader determine la carpeta especificada para las plantillas se
modifica la lista "templates" del archivo "settings", dentro de la lista
"templates" se encuentra una clave de un diccionario llamado "DIRS" cuyo
valor es una lista en donde debemos específicar la ruta de nuestra carpeta
de plantillas como una cadena de texto.

Cuando se llama a renderizar del objeto "doc_externo", es importante notar que
el método "render" de este objeto es diferente al método render de la clase 
"Template", por lo que pide como contexto un valor diferente (un diccionario), 
esto debido a que la clase "Template" de "loaders", es diferente a la clase 
"Template" de "django.template.Template".

El módulo "django.shortcuts" contiene otro método render que nos permite
reducir aún más las lineas de código utilizadas para cargar una plantilla.

## Plantillas incrustadas ##

Es posible incrustar plantillas dentro de otra plantilla para ahorrar código.

## Herencia de plantillas ##

La función de la herencia en las plantillas es similar al uso que se le da
a la herencia en la programación orientada a objetos.
